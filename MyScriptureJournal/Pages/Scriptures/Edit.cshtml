@page "{id:int?}"
@model MyScriptureJournal.Pages.Scriptures.EditModel

@{
    ViewData["Title"] = "Edit";
}

<h1 class="display-5 page-title">Edit Scripture Details</h1>

<hr />
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 edit-box">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                <input type="hidden" asp-for="Scripture.Id" />

           
                <div class="form-group">
                    <label asp-for="Scripture.StandardWork" class="control-label"></label>
                    <input asp-for="Scripture.StandardWork" class="form-control @(!string.IsNullOrEmpty(Model.Scripture.StandardWork) ? "" : "is-invalid")" />
                    <div class="invalid-feedback">
                        @Html.ValidationMessageFor(model => model.Scripture.StandardWork)
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="Scripture.Book" class="control-label"></label>
                    <input asp-for="Scripture.Book" class="form-control" placeholder="If not applicable enter N/A" />
                    <div class="invalid-feedback">
                        @Html.ValidationMessageFor(model => model.Scripture.Book)
                    </div>
                </div>


                <div class="form-group">
                    <label asp-for="Scripture.Chapter" class="control-label"></label>
                    <input asp-for="Scripture.Chapter" class="form-control" />
                    <div class="invalid-feedback">
                        @Html.ValidationMessageFor(model => model.Scripture.Chapter)
                    </div>
                </div>


                <div class="form-group">
                    <label asp-for="Scripture.Verse" class="control-label"></label>
                    <input asp-for="Scripture.Verse" class="form-control" />
                    <div class="invalid-feedback">
                        @Html.ValidationMessageFor(model => model.Scripture.Verse)
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="Scripture.VerseText" class="control-label"></label>
                    <textarea asp-for="Scripture.VerseText" class="form-control" rows="6"></textarea>
                    <div class="invalid-feedback">
                        @Html.ValidationMessageFor(model => model.Scripture.VerseText)
                    </div>
                </div>


                <div class="form-group">
                    <label asp-for="Scripture.Notes" class="control-label"></label>
                    <textarea asp-for="Scripture.Notes" class="form-control" rows="10"></textarea>
                    <div class="invalid-feedback">
                        @Html.ValidationMessageFor(model => model.Scripture.Notes)
                    </div>
                </div>


                <div class="form-group">
                    <label asp-for="Scripture.SaveDate" class="control-label"></label>
                    <input asp-for="Scripture.SaveDate" class="form-control" type="date" />
                    <div class="invalid-feedback">
                        @Html.ValidationMessageFor(model => model.Scripture.SaveDate)
                    </div>
                </div>


                <div class="form-group">
					<a class="btn btn-secondary btn-sm" asp-page="./Index">Back to List</a>
                    <button type="submit" class="btn btn-primary btn-sm">Save</button>
					
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
